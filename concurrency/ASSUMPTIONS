###### Print Assumptions:

After building the entire project (See README) you can print the
assumptions of our main theorem with:

	make assumptions-concurrency 

This will show all the Axioms, Assumptions and Admitted Lemmas used by
the main lemma in main.v. An explanation of these assumptions can be
found below, and a detail explanation of each Admitted lemma can be
found as comments in its file.

To print the full body of all assumptions you may also run:

	make assumptions-concurrency-body

This will show the same output above, but with the definition of each
assumption. For better formatting, you may also open the file
[main_print_assumptions.v] in CoqIDE or Proof General. The last
command in will print the assumptions.



###### Explaining the assumptions: 


#### Logic assumptions:
	
* Axioms.prop_ext:
	Propositional extensionality
* ProofIrrelevance.proof_irrelevance:
	Proof Irrelevance 
* lib.Axioms.proof_irr:
	Proof Irrelevance (2nd import)
* Eqdep.Eq_rect_eq.eq_rect_eq:
	invariance by substitution of reflexive equality proofs
* Classical_Prop.classic:
	Excluded middle.
* JMeq.JMeq_eq:
	John Major Equality.
* FunctionalExtensionality.functional_extensionality_dep 
	Dependent functional extensionality


#### Real numbers  (needed only by CompCert's floating-point theory)

* ClassicalDedekindReals.sig_not_dec :
	Classical Dedekind reals.
* ClassicalDedekindReals.sig_forall_dec:
	Classical Dedekind reals.
	

#### Self simulations

   Self simulation, described in the paper in Definition 5.14, has been proven
before (about CompCert semantics) by several published works. Their semantics 
is slightly different than ours, so we can't directly reuse their proofs. 
Proving the following lemmas should be tedious but straightforward:

* CPM_self_simulation.thread_step_preserves_self_simulates 
	The CPM self-simulates
* CPM_self_simulation.self_simulates_initial:
	The CPM self-simulates, initial diagram
* CPM_self_simulation.self_simulates_match:
	The CPM self-simulates match is not yet defined.
* CPM_self_simulation.machine_step_preserves_self_simulates:
	The CPM self-simulates, diagram for machine steps  
* CPM_self_simulation.lift_self_simulates:
	Hybrid CPMs are equal if the number of threads is less than their bound.
* Clight_self_simulation.clight_self_simulation:
	The Clight language self-simulates
* Asm_self_simulation.Asm_self_simulation 
	The Asm language self-simulates
* concurrent_compiler_simulation_proof.trivial_asm_simulation 
	The Asm language self-simulates
	

#### Reestablishing the concur_match:

In every step diagram for the CPM, we must reestablish the relation between the
resulting CPM steps. In all the lemmas, parts of the state change (e.g. the 
state of the running thread) and others don't (e.g. the state of other threads).
For the lemmas below, the NEW relationships have been established, but 
we still must recover the relationship of the parts of the state that have not 
changed. This is straightforward, but tedious.

* concur_match.concur_match_update_lock 
* concur_match.concur_match_updateC 
* concur_match.concur_match_updLock_empty 
* concur_match.concur_match_thread_step 
* concur_match.concur_match_free_lock 
* concur_match.concur_match_add_thread 

#### The synchronization functions are in the context.

CompCert links with external-function semantics via a given "Parameter"
that gives their semantics. We must assume that our 
synchronization functions are part of that parameter.

* synchronisation_steps_semantics.sync_functions_are_in_context

#### Inlined assembly is well defined:

If the program contains any inlined assembly, CompCert 
requires the following two parameters.

* Events.inline_assembly_sem:
	Parameter describing the behavior of inlined assembly.
* Events.inline_assembly_properties:
	Inlined assembly satisfies the same properties that 
	CompCert requires of external functions.
* Events.external_functions_sem:
	Semantics of external functions.
* Events.external_functions_properties:
	External functions satisfy the properties required by CompCert. 
	


#### Properties of CompCert semantics:

* concurrent_compiler_safety_proof.Clight_finite_branching:
	The Clight semantics is finite branching. In other words, 
	every step can only step to a finite number of states.
* safety_equivalence.finite_state_preservation:
	A set of Clight states is finite branching. In other words,
	there is a finite number states that can be reaching, by
	taking one single step, from a finite set of Clight states.
	This fact follows from the Clight_finite_branching above.
* Asm.get_arguments_correct:
	Correctness of the way CompCert gets arguments from stack.
	This is architecture dependent.


#### External functions, built-ins and inlined assembly:

We have to impose certain limitations to external functions, 
built-ins and inlined assembly, presented here. We separate 
these restrictions in two lists: the ones that CompCert should
enforce and the ones that we enforce:

	## Compcert should enforce these properties:

* Clight_core.inline_external_call_mem_events:
	External functions that the compiler can inline 
	(which can be done for some built-ins), must respect
	the memory interface. 
* Clightcore_coop.inline_assembly_memstep:
	Inlined assembly should respect the memory interface.
* ClightSemanticsForMachines.Clight_step_nil_trace_not_atx:
	We assume external, that are not built-ins, have
	no trace. This restriction can easily be lifted
	by distinguishing between synch calls and other
	external functions.
* Clight_mem_ok.external_call_wellformed:
	External calls must preserve well-formed 
	memories. That is, they don't introduce 
	dangling pointers.

	## New properties we require:
* ClightSemanticsForMachines.extcall_ev_elim: (* LOOK at this with Andrew*)
	Builtins respect the memory interface and form a 
	"event" memory semantics.  

#### Juicy Semantics:
	
* semax_safety_spawn.Concurrent_Espec_permits_framing:
	If a program is safe for a memory, 
	it is safe for a larger memory. 
	
#### Lemmas under construction

* single_thread_simulation_proof.start_step_diagram:
	This lemma is mostly done.
* single_thread_simulation_proof.initial_diagram 
	Arguments must be valid, Main must be valid!

#### Miscellaneous assumptions (Santiago is working on this March 30):

* compcert_threads_lemmas.SimProofs.sim_external 
	Merge conflict, needs fixing.

